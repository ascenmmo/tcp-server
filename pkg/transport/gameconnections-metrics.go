// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/ascenmmo/tcp-server/pkg/restconnection"
	"github.com/ascenmmo/tcp-server/pkg/restconnection/types"
	"github.com/go-kit/kit/metrics"
	"github.com/google/uuid"
	"time"
)

type metricsGameConnections struct {
	next            restconnection.GameConnections
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareGameConnections(next restconnection.GameConnections) restconnection.GameConnections {
	return &metricsGameConnections{
		next:            next,
		requestCount:    RequestCount.With("service", "GameConnections"),
		requestCountAll: RequestCountAll.With("service", "GameConnections"),
		requestLatency:  RequestLatency.With("service", "GameConnections"),
	}
}

func (m metricsGameConnections) SetSendMessage(ctx context.Context, token string, message types.RequestSetMessage) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "setSendMessage", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "setSendMessage", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "setSendMessage").Add(1)

	return m.next.SetSendMessage(ctx, token, message)
}

func (m metricsGameConnections) GetMessage(ctx context.Context, token string) (messages types.ResponseGetMessage, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getMessage", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getMessage", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getMessage").Add(1)

	return m.next.GetMessage(ctx, token)
}

func (m metricsGameConnections) RemoveUser(ctx context.Context, token string, userID uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "removeUser", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "removeUser", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "removeUser").Add(1)

	return m.next.RemoveUser(ctx, token, userID)
}
