// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"

	"github.com/ascenmmo/tcp-server/pkg/api"
	"github.com/ascenmmo/tcp-server/pkg/api/types"
	"github.com/google/uuid"
	otel "go.opentelemetry.io/otel"
	trace "go.opentelemetry.io/otel/trace"
)

type traceGameConnections struct {
	next api.GameConnections
}

func traceMiddlewareGameConnections(next api.GameConnections) api.GameConnections {
	return &traceGameConnections{next: next}
}

func (svc traceGameConnections) SetSendMessage(ctx context.Context, token string, message types.RequestSetMessage) (err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "gameConnections.setSendMessage")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.SetSendMessage(ctx, token, message)
}

func (svc traceGameConnections) GetMessage(ctx context.Context, token string) (messages types.ResponseGetMessage, err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "gameConnections.getMessage")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.GetMessage(ctx, token)
}

func (svc traceGameConnections) RemoveUser(ctx context.Context, token string, userID uuid.UUID) (err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "gameConnections.removeUser")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.RemoveUser(ctx, token, userID)
}
