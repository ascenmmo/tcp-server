// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/tcp-server/pkg/restconnection"
	"github.com/ascenmmo/tcp-server/pkg/restconnection/types"
	"github.com/google/uuid"
	"github.com/opentracing/opentracing-go"
)

type traceGameConnections struct {
	next restconnection.GameConnections
}

func traceMiddlewareGameConnections(next restconnection.GameConnections) restconnection.GameConnections {
	return &traceGameConnections{next: next}
}

func (svc traceGameConnections) SetSendMessage(ctx context.Context, token string, message types.RequestSetMessage) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SetSendMessage")
	return svc.next.SetSendMessage(ctx, token, message)
}

func (svc traceGameConnections) GetMessage(ctx context.Context, token string) (messages types.ResponseGetMessage, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetMessage")
	return svc.next.GetMessage(ctx, token)
}

func (svc traceGameConnections) RemoveUser(ctx context.Context, token string, userID uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "RemoveUser")
	return svc.next.RemoveUser(ctx, token, userID)
}
