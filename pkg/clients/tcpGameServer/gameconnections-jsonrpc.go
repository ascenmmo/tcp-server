// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package tcpGameServer

import (
	"context"
	"fmt"
	"github.com/ascenmmo/tcp-server/pkg/clients/tcpGameServer/hasher"
	"github.com/ascenmmo/tcp-server/pkg/clients/tcpGameServer/jsonrpc"
	"github.com/ascenmmo/tcp-server/pkg/restconnection/types"
	"github.com/google/uuid"
)

type ClientGameConnections struct {
	*ClientJsonRPC
}

type retGameConnectionsSetSendMessage = func(err error)
type retGameConnectionsGetMessage = func(messages types.ResponseGetMessage, err error)
type retGameConnectionsRemoveUser = func(err error)

func (cli *ClientGameConnections) SetSendMessage(ctx context.Context, token string, message types.RequestSetMessage) (err error) {

	request := requestGameConnectionsSetSendMessage{
		Message: message,
		Token:   token,
	}
	var response responseGameConnectionsSetSendMessage
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "gameconnections.setsendmessage", request)
	var fallbackCheck func(error) bool
	if cli.fallbackGameConnections != nil {
		fallbackCheck = cli.fallbackGameConnections.SetSendMessage
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientGameConnections) ReqSetSendMessage(ctx context.Context, callback retGameConnectionsSetSendMessage, token string, message types.RequestSetMessage) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "gameconnections.setsendmessage",
		Params: requestGameConnectionsSetSendMessage{
			Message: message,
			Token:   token,
		},
	}}
	if callback != nil {
		var response responseGameConnectionsSetSendMessage
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackGameConnections != nil {
				fallbackCheck = cli.fallbackGameConnections.SetSendMessage
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientGameConnections) GetMessage(ctx context.Context, token string) (messages types.ResponseGetMessage, err error) {

	request := requestGameConnectionsGetMessage{Token: token}
	var response responseGameConnectionsGetMessage
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "gameconnections.getmessage", request)
	var fallbackCheck func(error) bool
	if cli.fallbackGameConnections != nil {
		fallbackCheck = cli.fallbackGameConnections.GetMessage
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Messages, err
}

func (cli *ClientGameConnections) ReqGetMessage(ctx context.Context, callback retGameConnectionsGetMessage, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "gameconnections.getmessage",
		Params:  requestGameConnectionsGetMessage{Token: token},
	}}
	if callback != nil {
		var response responseGameConnectionsGetMessage
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackGameConnections != nil {
				fallbackCheck = cli.fallbackGameConnections.GetMessage
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Messages, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientGameConnections) RemoveUser(ctx context.Context, token string, userID uuid.UUID) (err error) {

	request := requestGameConnectionsRemoveUser{
		Token:  token,
		UserID: userID,
	}
	var response responseGameConnectionsRemoveUser
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "gameconnections.removeuser", request)
	var fallbackCheck func(error) bool
	if cli.fallbackGameConnections != nil {
		fallbackCheck = cli.fallbackGameConnections.RemoveUser
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientGameConnections) ReqRemoveUser(ctx context.Context, callback retGameConnectionsRemoveUser, token string, userID uuid.UUID) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "gameconnections.removeuser",
		Params: requestGameConnectionsRemoveUser{
			Token:  token,
			UserID: userID,
		},
	}}
	if callback != nil {
		var response responseGameConnectionsRemoveUser
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackGameConnections != nil {
				fallbackCheck = cli.fallbackGameConnections.RemoveUser
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}
